
==================== Inventory ===============================
it is agentless, dont need install additional software on the target machines to work with Ansible
it is required to configure an agent on the target system before using any kind of automation
information about these target systems is stored in an INVENTORY FILE (INI format). If you dont creatte one, Ansible will use the default (/etc/ansible/hosts)

create an alias  -> web ansible_host=192.0.2.50.
                 -> db ansible_host=server3.company.com 
In case doesnt have other host you can use -> localhost ansible_connection=localhost    
    
ansible_host        -> IP or FQDN(domain name)
ansible_connection  -> how is connect to target server ssh or winrm
ansible_port        -> port will be connected
ansible_user        -> defines the user used to make remote connections
ansible_password (win)
ansible_ssh_pass (linux)

#
To create groups:
[web_servers]
web1
web2
web3

[db_servers]
db1

#
To create group of groups:
[web_servers]
web1
web2
web3

[db_servers]
db1

[all_servers:children]
web_servers
db_servers


dynamic inventory
specify -i parameter        
static you specify a file      ansible-playbook -i inventory.txt playbook.yaml
dynmaic you specify a script   ansible-playbook -i inventory.py playbook.yaml

==================== Playbooks ===============================
It is Ansible's orchestration language
where we define what we want Ansible to do
They are written in yaml format
it is a list of dictionaries in YAML

in the playbooks all connection info for the host is retrieved from inventory file.
    if specify a group in hosts inside the playbook, the listed tasks will be executed on all the hosts listed under that group simultaneously
Ex.:
-
    name: 'Execute two commands on web_node1'
    hosts: boston_nodes
    tasks:
        -
            name: 'Execute a date command'
            command: date
        -
            name: 'Execute a command to display hosts file'
            command: 'cat /etc/hosts'


the different actions run by tasks are called modules (command, script, yum, service and others 100s)
ansible-doc -l
https://docs.ansible.com/ansible/2.9/modules/list_of_all_modules.html

to run the playbook -> ansible-playbook playbook-file-name.yaml
for additional parameters -> ansible-playbook --help


==================== Modules ===============================
Based on in your functionality
system -   actions to be performed at a system level
commands - execute command or scripts on a host - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html#parameters
files -    help to work with files
database - help work with databases such as MySQL, MongoDB, Postgresql
cloud -    many modules for each cloud provider and more
windows -  help use Ansible in a windows environment
more...

in commands modules
free_form are commands they doesn't require you specify key=value format to the command to run

script module - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/script_module.html
              - executers a script which is located locally on the Ansible controller machine.
              - to run a script on one or hundreds of servers, Ansible does the copy automatically and execute on the remote systems

service module - (idempotency) do Started instead Start. If the service is no already started Ansible will start, but if it is already started won't do anything
               - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html 

lineinfile - search for a line in a file and replace it or add it if doesnt exist. For example, if you use a script to add a line in DNS file it will add everytime, with ansbile only once, 
because it will check if that entry is already there


==================== Variables ===============================
https://ansible-docs.readthedocs.io/zh/stable-2.0/rst/playbooks_variables.html

Can add variable inside the file like playbook, inventory, variables 
Instead of to hard code some configurations, use variable inside double {} ( Jinja2 Templating) ->  '{{ variable_name }}' 
                                                                                                ->   Something{{ variable_name }}anotherthing  
Those variables inside {{}} can be store in the inventory file, but a better way is in a variable file with the name of specific host (.yaml)
Ex.: the argument hosts inside the playbook can be named web and the variable file name called web.yaml

inventory file
localhost ansible_connection=localhost nameserver_ip=10.1.250.10 snmp_port=160-161
playbook
-
    name: 'Update nameserver entry into resolv.conf file on localhost'
    hosts: localhost
    tasks:
        -
            name: 'Update nameserver entry into resolv.conf file'
            lineinfile:
                path: /etc/resolv.conf
                line: 'nameserver {{ nameserver_ip }}'
        -
            name: 'Disable SNMP Port'
            
            
            firewalld:
                port: '{{ snmp_port }}'
                permanent: true
                
              
 ==================== Vault ===============================
 It is a feature that allows you to keep sensitive data encrypted rather than plaintext in playbooks/roles.
 commands
        create
        view
        edit
        encrypt
        decrypt
        --ask-vault-pass: provide password while running playbook
        --vault-password-file: to pass a vault password through a file
        
 
